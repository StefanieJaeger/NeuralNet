package com.github.stefaniejaeger.neuralnet.algorithm;

import com.github.stefaniejaeger.neuralnet.Test;
import com.github.stefaniejaeger.neuralnet.network.NeuralNet;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

/**
 * @author Stefanie
 */
public class GeneticAlgorithm {
    private List<Genome> population;
    private List<Genome> newPopulation;

    private int generationCount = 1;

    private double crossoverRate;
    private double mutationRate;

    private NeuralNet network;

    private RouletteWheel<Genome> rouletteWheel;

    public List<Genome> winner;

    public GeneticAlgorithm(GeneticAlgorithmConfiguration geneticAlgorithmConfiguration) {
        this.network = geneticAlgorithmConfiguration.neuralNet;
        this.crossoverRate = geneticAlgorithmConfiguration.crossoverRate;
        this.mutationRate = geneticAlgorithmConfiguration.mutationRate;

        this.population = new ArrayList<>();
        this.winner = new ArrayList<>();

        //create the first generation
        initializePopulation(geneticAlgorithmConfiguration.populationSize, geneticAlgorithmConfiguration.chromosomeLengthOfGenome);
    }

    /**
     * Initialize population with first generation
     *
     * @param size             number of members in one generation/population
     * @param chromosomeLength number of doubles in dna
     */
    private void initializePopulation(int size, int chromosomeLength) {
        Random ran = new Random();

        for (int i = 0; i < size; i++) {
            List<Double> dna = new ArrayList<>();
            for (int j = 0; j < chromosomeLength; j++) {
                dna.add(ran.nextDouble());
            }

            //add new genome with new chromosome to population
            population.add(new Genome(new Chromosome(dna)));
        }
    }

    /**
     * Make additional generation, members are generated by members of previous generation
     */
    public void makeNextGeneration() {
        //make new generation
        newPopulation = new ArrayList<>();
        populateRouletteWheel();

        while (newPopulation.size() < population.size()) {
            List<Genome> parents = getMomAndDad();
            makeBabies(parents.get(0), parents.get(1));
        }

        generationCount++;
        population = newPopulation;
    }

    /**
     * Fill roulette wheel with members of current generation, give each as many seats as their fitness
     */
    private void populateRouletteWheel() {
        //add population member to the list as many times as his fitness
        rouletteWheel = new RouletteWheel<>();
        for (Genome gen : population)
            for (int i = 0; i < gen.getFitness(); i++)
                rouletteWheel.add(gen);
    }

    /**
     * Randomly take two genomes from roulette wheel as mom and dad
     *
     * @return Two genomes as mom and dad
     */
    private List<Genome> getMomAndDad() {
        List<Genome> parents = new ArrayList<>();

        parents.add(rouletteWheel.getRandomElement());
        parents.add(rouletteWheel.getRandomElement());

        while (parents.get(0) == parents.get(1))
            parents.set(1, rouletteWheel.getRandomElement());

        return parents;
    }

    private void makeBabies(Genome mom, Genome dad) {
        Random ran = new Random();
        if (crossoverRate < ran.nextDouble()) {
            //mom and dad get to live on if they don't fuck
            newPopulation.add(new Genome(mom.getChromosome()));
            newPopulation.add(new Genome(dad.getChromosome()));

            return;
        }

        // if crossoverRate gets matched, make two new genomes from mom and dad
        int length = mom.getChromosome().getDNA().size();
        int index = ran.nextInt(length);

        Chromosome kiddo1Chromosome = mom.getChromosome();
        Chromosome kiddo2Chromosome = dad.getChromosome();

        kiddo1Chromosome.crossover(index, kiddo2Chromosome);

        //Create new genomes with Chromosome
        Genome kid1 = new Genome(kiddo1Chromosome);
        Genome kid2 = new Genome(kiddo2Chromosome);

        //Try to mutate kids to get some diversity
        kid1 = mutate(kid1);
        kid2 = mutate(kid2);

        newPopulation.add(kid1);
        newPopulation.add(kid2);
    }

    private Genome mutate(Genome gen) {
        gen.getChromosome().mutate(mutationRate);
        return gen;
    }

    public void testPrintAndScorePopulation(List<Test> testCases) {
        int genomeCounter = 0;
        for (Genome genome : population) {
            network.setWeights(genome.getChromosome());
            for (Test test : testCases) {
                network.calculateOutputs(test.getInputs());
                if (test.isOutputCorrect(network.getRoundedOutputs()))
                    genome.increaseFitness();
            }
            System.out.println("Genome Generation " + generationCount + ", Member " + genomeCounter + " " + genome.toString());
            genomeCounter++;
        }
    }

    public boolean isDone() {
        return winner.size() >= 1;
    }
}
